# Generated by sila2.code_generator; sila2.__version__: 0.8.0
from __future__ import annotations

import logging
from functools import partial
from queue import Queue
from threading import Event
from typing import List, Optional, Union, cast

from sila2.framework import Command, Feature, FullyQualifiedIdentifier, Metadata, Property
from sila2.server import MetadataDict, SilaServer

from sila_cetoni.application.system import ApplicationSystem, CetoniApplicationSystem
from sila_cetoni.io.device_drivers import AnalogOutChannelInterface
from sila_cetoni.utils import PropertyUpdater, not_close

from ..generated.analogoutchannelcontroller import (
    AnalogOutChannelControllerBase,
    AnalogOutChannelControllerFeature,
    InvalidChannelIndex,
    SetOutputValue_Responses,
)

logger = logging.getLogger(__name__)


@CetoniApplicationSystem.monitor_traffic
class AnalogOutChannelControllerImpl(AnalogOutChannelControllerBase):
    __system: ApplicationSystem
    __channels: List[AnalogOutChannelInterface]
    __channel_index_metadata: Metadata[int]
    __value_queues: List[Queue[float]]  # same number of items and order as `__channels`

    def __init__(self, server: SilaServer, channels: List[AnalogOutChannelInterface]):
        super().__init__(server)
        self.__system = ApplicationSystem()  # type: ignore
        self.__channels = channels
        self.__channel_index_metadata = cast(Metadata[int], AnalogOutChannelControllerFeature["ChannelIndex"])
        self.__stop_event = Event()

        self.__value_queues = []
        for i in range(len(self.__channels)):
            queue = Queue()
            self.__value_queues += [queue]

            self.run_periodically(
                PropertyUpdater(
                    lambda: self.__channels[i].value,
                    not_close,
                    partial(self.update_Value, queue=queue),
                    when=self.__system.state.is_operational,
                )
            )

    def get_NumberOfChannels(self, *, metadata: MetadataDict) -> int:
        return len(self.__channels)

    def Value_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        channel_index: int = metadata[self.__channel_index_metadata]
        try:
            if channel_index < 0:
                raise IndexError
            return self.__value_queues[channel_index]
        except IndexError:
            raise InvalidChannelIndex(
                message=f"The sent channel index {channel_index} is invalid. The index must be between 0 and {len(self.__channels) - 1}.",
            )

    def SetOutputValue(self, Value: float, *, metadata: MetadataDict) -> SetOutputValue_Responses:
        channel_index: int = metadata[self.__channel_index_metadata]
        logger.debug(f"channel index: {channel_index}")
        try:
            self.__channels[channel_index].value = Value
            return SetOutputValue_Responses()
        except IndexError:
            raise InvalidChannelIndex(
                message=f"The sent channel index {channel_index} is invalid. The index must be between 0 and {len(self.__channels) - 1}.",
            )

    def get_calls_affected_by_ChannelIndex(
        self,
    ) -> List[Union[Feature, Command, Property, FullyQualifiedIdentifier]]:
        return [
            cast(Property, AnalogOutChannelControllerFeature["Value"]),
            cast(Command, AnalogOutChannelControllerFeature["SetOutputValue"]),
        ]
